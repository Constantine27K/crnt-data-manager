syntax = "proto3";

package github.constantine27k.crnt_data_manager.api.task;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "status/status.proto";

option go_package = "github.com/Constantine27K/crnt-data-manager/pkg/task;task";

service TaskRegistry {
	rpc Create (TaskCreateRequest) returns (TaskCreateResponse) {
		option (google.api.http) = {
			post: "/v1/task/create"
			body: "*"
		};
	};
	rpc Update (TaskUpdateRequest) returns (TaskUpdateResponse) {
		option (google.api.http) = {
			put: "/v1/task/{id}/update"
			body: "*"
		};
	};
	rpc Get (TaskGetRequest) returns (TaskGetResponse) {
		option (google.api.http) = {
			get: "/v1/tasks/get"
		};
	};
	rpc GetByID (TaskGetByIDRequest) returns (TaskGetByIDResponse) {
		option (google.api.http) = {
			get: "/v1/task/{id}/get"
		};
	};
	rpc Delete (TaskDeleteRequest) returns (TaskDeleteResponse) {
		option (google.api.http) = {
			delete: "/v1/task/{id}/delete"
		};
	};
}

message Task {
	int64 id = 1;
	string name = 2;
	string author = 3;
	string assigned = 4;
	string qa = 5;
	string reviewer = 6;
	Template template = 7;
	google.protobuf.Timestamp created_at = 8;
	google.protobuf.Timestamp deadline = 9;
	google.protobuf.Timestamp updated_at = 10;
	status.Status status = 11;
	int64 sprint_id = 12;
	int64 project_id = 13;
	int64 component_id = 14;
	int64 story_points = 15;
}

message TaskCreateRequest {
	Task task = 1;
}

message TaskCreateResponse {
	int64 id = 1;
}

message TaskUpdateRequest {
	int64 id = 1;
	Task task = 2;
}

message TaskUpdateResponse {
	int64 id = 1;
}

message TaskGetRequest {
	repeated int64 ids = 1;
	string author = 2;
	string assigned = 3;
	int64 sprint = 4;
}

message TaskGetResponse {
	repeated Task tasks = 1;
}

message TaskGetByIDRequest {
	int64 id = 1;
}

message TaskGetByIDResponse {
	Task tasks = 1;
}

message TaskDeleteRequest {
	int64 id = 1;
}

message TaskDeleteResponse {
	int64 id = 1;
}

enum Template {
	TEMPLATE_UNKNOWN = 0;
	TEMPLATE_COMMON = 1;
	TEMPLATE_DEVELOPMENT = 2;
}