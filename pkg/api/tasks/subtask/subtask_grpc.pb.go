// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/tasks/subtask/subtask.proto

package subtask

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubtaskRegistryClient is the client API for SubtaskRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubtaskRegistryClient interface {
	CreateSubtask(ctx context.Context, in *SubtaskCreateRequest, opts ...grpc.CallOption) (*SubtaskCreateResponse, error)
	UpdateSubtask(ctx context.Context, in *SubtaskUpdateRequest, opts ...grpc.CallOption) (*SubtaskUpdateResponse, error)
	GetSubtask(ctx context.Context, in *SubtaskGetRequest, opts ...grpc.CallOption) (*SubtaskGetResponse, error)
	GetSubtaskByID(ctx context.Context, in *SubtaskGetByIDRequest, opts ...grpc.CallOption) (*SubtaskGetByIDResponse, error)
	GetSubtaskInfo(ctx context.Context, in *SubtaskInfoGetRequest, opts ...grpc.CallOption) (*SubtaskInfoGetResponse, error)
	GetSubtaskInfoByID(ctx context.Context, in *SubtaskInfoGetByIDRequest, opts ...grpc.CallOption) (*SubtaskInfoGetByIDResponse, error)
}

type subtaskRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewSubtaskRegistryClient(cc grpc.ClientConnInterface) SubtaskRegistryClient {
	return &subtaskRegistryClient{cc}
}

func (c *subtaskRegistryClient) CreateSubtask(ctx context.Context, in *SubtaskCreateRequest, opts ...grpc.CallOption) (*SubtaskCreateResponse, error) {
	out := new(SubtaskCreateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/CreateSubtask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskRegistryClient) UpdateSubtask(ctx context.Context, in *SubtaskUpdateRequest, opts ...grpc.CallOption) (*SubtaskUpdateResponse, error) {
	out := new(SubtaskUpdateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/UpdateSubtask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskRegistryClient) GetSubtask(ctx context.Context, in *SubtaskGetRequest, opts ...grpc.CallOption) (*SubtaskGetResponse, error) {
	out := new(SubtaskGetResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/GetSubtask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskRegistryClient) GetSubtaskByID(ctx context.Context, in *SubtaskGetByIDRequest, opts ...grpc.CallOption) (*SubtaskGetByIDResponse, error) {
	out := new(SubtaskGetByIDResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/GetSubtaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskRegistryClient) GetSubtaskInfo(ctx context.Context, in *SubtaskInfoGetRequest, opts ...grpc.CallOption) (*SubtaskInfoGetResponse, error) {
	out := new(SubtaskInfoGetResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/GetSubtaskInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskRegistryClient) GetSubtaskInfoByID(ctx context.Context, in *SubtaskInfoGetByIDRequest, opts ...grpc.CallOption) (*SubtaskInfoGetByIDResponse, error) {
	out := new(SubtaskInfoGetByIDResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/GetSubtaskInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtaskRegistryServer is the server API for SubtaskRegistry service.
// All implementations should embed UnimplementedSubtaskRegistryServer
// for forward compatibility
type SubtaskRegistryServer interface {
	CreateSubtask(context.Context, *SubtaskCreateRequest) (*SubtaskCreateResponse, error)
	UpdateSubtask(context.Context, *SubtaskUpdateRequest) (*SubtaskUpdateResponse, error)
	GetSubtask(context.Context, *SubtaskGetRequest) (*SubtaskGetResponse, error)
	GetSubtaskByID(context.Context, *SubtaskGetByIDRequest) (*SubtaskGetByIDResponse, error)
	GetSubtaskInfo(context.Context, *SubtaskInfoGetRequest) (*SubtaskInfoGetResponse, error)
	GetSubtaskInfoByID(context.Context, *SubtaskInfoGetByIDRequest) (*SubtaskInfoGetByIDResponse, error)
}

// UnimplementedSubtaskRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedSubtaskRegistryServer struct {
}

func (UnimplementedSubtaskRegistryServer) CreateSubtask(context.Context, *SubtaskCreateRequest) (*SubtaskCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubtask not implemented")
}
func (UnimplementedSubtaskRegistryServer) UpdateSubtask(context.Context, *SubtaskUpdateRequest) (*SubtaskUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubtask not implemented")
}
func (UnimplementedSubtaskRegistryServer) GetSubtask(context.Context, *SubtaskGetRequest) (*SubtaskGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtask not implemented")
}
func (UnimplementedSubtaskRegistryServer) GetSubtaskByID(context.Context, *SubtaskGetByIDRequest) (*SubtaskGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtaskByID not implemented")
}
func (UnimplementedSubtaskRegistryServer) GetSubtaskInfo(context.Context, *SubtaskInfoGetRequest) (*SubtaskInfoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtaskInfo not implemented")
}
func (UnimplementedSubtaskRegistryServer) GetSubtaskInfoByID(context.Context, *SubtaskInfoGetByIDRequest) (*SubtaskInfoGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtaskInfoByID not implemented")
}

// UnsafeSubtaskRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubtaskRegistryServer will
// result in compilation errors.
type UnsafeSubtaskRegistryServer interface {
	mustEmbedUnimplementedSubtaskRegistryServer()
}

func RegisterSubtaskRegistryServer(s grpc.ServiceRegistrar, srv SubtaskRegistryServer) {
	s.RegisterService(&SubtaskRegistry_ServiceDesc, srv)
}

func _SubtaskRegistry_CreateSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskRegistryServer).CreateSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/CreateSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskRegistryServer).CreateSubtask(ctx, req.(*SubtaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtaskRegistry_UpdateSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtaskUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskRegistryServer).UpdateSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/UpdateSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskRegistryServer).UpdateSubtask(ctx, req.(*SubtaskUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtaskRegistry_GetSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtaskGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskRegistryServer).GetSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/GetSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskRegistryServer).GetSubtask(ctx, req.(*SubtaskGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtaskRegistry_GetSubtaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtaskGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskRegistryServer).GetSubtaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/GetSubtaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskRegistryServer).GetSubtaskByID(ctx, req.(*SubtaskGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtaskRegistry_GetSubtaskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtaskInfoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskRegistryServer).GetSubtaskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/GetSubtaskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskRegistryServer).GetSubtaskInfo(ctx, req.(*SubtaskInfoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubtaskRegistry_GetSubtaskInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtaskInfoGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskRegistryServer).GetSubtaskInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry/GetSubtaskInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskRegistryServer).GetSubtaskInfoByID(ctx, req.(*SubtaskInfoGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubtaskRegistry_ServiceDesc is the grpc.ServiceDesc for SubtaskRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubtaskRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry",
	HandlerType: (*SubtaskRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubtask",
			Handler:    _SubtaskRegistry_CreateSubtask_Handler,
		},
		{
			MethodName: "UpdateSubtask",
			Handler:    _SubtaskRegistry_UpdateSubtask_Handler,
		},
		{
			MethodName: "GetSubtask",
			Handler:    _SubtaskRegistry_GetSubtask_Handler,
		},
		{
			MethodName: "GetSubtaskByID",
			Handler:    _SubtaskRegistry_GetSubtaskByID_Handler,
		},
		{
			MethodName: "GetSubtaskInfo",
			Handler:    _SubtaskRegistry_GetSubtaskInfo_Handler,
		},
		{
			MethodName: "GetSubtaskInfoByID",
			Handler:    _SubtaskRegistry_GetSubtaskInfoByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tasks/subtask/subtask.proto",
}
