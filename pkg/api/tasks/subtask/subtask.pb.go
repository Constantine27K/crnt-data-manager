// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: api/tasks/subtask/subtask.proto

package subtask

import (
	comments "github.com/Constantine27K/crnt-data-manager/pkg/api/comments"
	priority "github.com/Constantine27K/crnt-data-manager/pkg/api/state/priority"
	status "github.com/Constantine27K/crnt-data-manager/pkg/api/state/status"
	template "github.com/Constantine27K/crnt-data-manager/pkg/api/state/template"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Subtask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TaskId      int64                  `protobuf:"varint,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Comments    []*comments.Comment    `protobuf:"bytes,5,rep,name=comments,proto3" json:"comments,omitempty"`
	Author      string                 `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Assigned    string                 `protobuf:"bytes,7,opt,name=assigned,proto3" json:"assigned,omitempty"`
	Qa          string                 `protobuf:"bytes,8,opt,name=qa,proto3" json:"qa,omitempty"`
	Reviewer    string                 `protobuf:"bytes,9,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	Template    template.Template      `protobuf:"varint,10,opt,name=template,proto3,enum=github.constantine27k.crnt_data_manager.api.state.template.Template" json:"template,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Deadline    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=deadline,proto3" json:"deadline,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status      *status.TaskStatus     `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	Priority    priority.Priority      `protobuf:"varint,15,opt,name=priority,proto3,enum=github.constantine27k.crnt_data_manager.api.state.priority.Priority" json:"priority,omitempty"`
	ProjectId   int64                  `protobuf:"varint,16,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ComponentId []int64                `protobuf:"varint,17,rep,packed,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	StoryPoints int64                  `protobuf:"varint,18,opt,name=story_points,json=storyPoints,proto3" json:"story_points,omitempty"`
}

func (x *Subtask) Reset() {
	*x = Subtask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_subtask_subtask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subtask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subtask) ProtoMessage() {}

func (x *Subtask) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_subtask_subtask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subtask.ProtoReflect.Descriptor instead.
func (*Subtask) Descriptor() ([]byte, []int) {
	return file_api_tasks_subtask_subtask_proto_rawDescGZIP(), []int{0}
}

func (x *Subtask) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Subtask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Subtask) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *Subtask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Subtask) GetComments() []*comments.Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Subtask) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Subtask) GetAssigned() string {
	if x != nil {
		return x.Assigned
	}
	return ""
}

func (x *Subtask) GetQa() string {
	if x != nil {
		return x.Qa
	}
	return ""
}

func (x *Subtask) GetReviewer() string {
	if x != nil {
		return x.Reviewer
	}
	return ""
}

func (x *Subtask) GetTemplate() template.Template {
	if x != nil {
		return x.Template
	}
	return template.Template(0)
}

func (x *Subtask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Subtask) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *Subtask) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Subtask) GetStatus() *status.TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Subtask) GetPriority() priority.Priority {
	if x != nil {
		return x.Priority
	}
	return priority.Priority(0)
}

func (x *Subtask) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Subtask) GetComponentId() []int64 {
	if x != nil {
		return x.ComponentId
	}
	return nil
}

func (x *Subtask) GetStoryPoints() int64 {
	if x != nil {
		return x.StoryPoints
	}
	return 0
}

type SubtaskCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtask *Subtask `protobuf:"bytes,1,opt,name=subtask,proto3" json:"subtask,omitempty"`
}

func (x *SubtaskCreateRequest) Reset() {
	*x = SubtaskCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_subtask_subtask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskCreateRequest) ProtoMessage() {}

func (x *SubtaskCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_subtask_subtask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskCreateRequest.ProtoReflect.Descriptor instead.
func (*SubtaskCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_subtask_subtask_proto_rawDescGZIP(), []int{1}
}

func (x *SubtaskCreateRequest) GetSubtask() *Subtask {
	if x != nil {
		return x.Subtask
	}
	return nil
}

type SubtaskCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubtaskCreateResponse) Reset() {
	*x = SubtaskCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_subtask_subtask_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskCreateResponse) ProtoMessage() {}

func (x *SubtaskCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_subtask_subtask_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskCreateResponse.ProtoReflect.Descriptor instead.
func (*SubtaskCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_subtask_subtask_proto_rawDescGZIP(), []int{2}
}

func (x *SubtaskCreateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubtaskUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Subtask *Subtask `protobuf:"bytes,2,opt,name=subtask,proto3" json:"subtask,omitempty"`
}

func (x *SubtaskUpdateRequest) Reset() {
	*x = SubtaskUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_subtask_subtask_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskUpdateRequest) ProtoMessage() {}

func (x *SubtaskUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_subtask_subtask_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskUpdateRequest.ProtoReflect.Descriptor instead.
func (*SubtaskUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_subtask_subtask_proto_rawDescGZIP(), []int{3}
}

func (x *SubtaskUpdateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubtaskUpdateRequest) GetSubtask() *Subtask {
	if x != nil {
		return x.Subtask
	}
	return nil
}

type SubtaskUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubtaskUpdateResponse) Reset() {
	*x = SubtaskUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_subtask_subtask_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskUpdateResponse) ProtoMessage() {}

func (x *SubtaskUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_subtask_subtask_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskUpdateResponse.ProtoReflect.Descriptor instead.
func (*SubtaskUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_subtask_subtask_proto_rawDescGZIP(), []int{4}
}

func (x *SubtaskUpdateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubtaskGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []int64            `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Author    string             `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Assigned  string             `protobuf:"bytes,3,opt,name=assigned,proto3" json:"assigned,omitempty"`
	SprintId  int64              `protobuf:"varint,4,opt,name=sprint_id,json=sprintId,proto3" json:"sprint_id,omitempty"`
	ProjectId int64              `protobuf:"varint,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Status    *status.TaskStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SubtaskGetRequest) Reset() {
	*x = SubtaskGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_subtask_subtask_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskGetRequest) ProtoMessage() {}

func (x *SubtaskGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_subtask_subtask_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskGetRequest.ProtoReflect.Descriptor instead.
func (*SubtaskGetRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_subtask_subtask_proto_rawDescGZIP(), []int{5}
}

func (x *SubtaskGetRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SubtaskGetRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SubtaskGetRequest) GetAssigned() string {
	if x != nil {
		return x.Assigned
	}
	return ""
}

func (x *SubtaskGetRequest) GetSprintId() int64 {
	if x != nil {
		return x.SprintId
	}
	return 0
}

func (x *SubtaskGetRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *SubtaskGetRequest) GetStatus() *status.TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type SubtaskGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtasks []*Subtask `protobuf:"bytes,1,rep,name=subtasks,proto3" json:"subtasks,omitempty"`
}

func (x *SubtaskGetResponse) Reset() {
	*x = SubtaskGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_subtask_subtask_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskGetResponse) ProtoMessage() {}

func (x *SubtaskGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_subtask_subtask_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskGetResponse.ProtoReflect.Descriptor instead.
func (*SubtaskGetResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_subtask_subtask_proto_rawDescGZIP(), []int{6}
}

func (x *SubtaskGetResponse) GetSubtasks() []*Subtask {
	if x != nil {
		return x.Subtasks
	}
	return nil
}

type SubtaskGetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubtaskGetByIDRequest) Reset() {
	*x = SubtaskGetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_subtask_subtask_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskGetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskGetByIDRequest) ProtoMessage() {}

func (x *SubtaskGetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_subtask_subtask_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskGetByIDRequest.ProtoReflect.Descriptor instead.
func (*SubtaskGetByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_subtask_subtask_proto_rawDescGZIP(), []int{7}
}

func (x *SubtaskGetByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubtaskGetByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtask *Subtask `protobuf:"bytes,1,opt,name=subtask,proto3" json:"subtask,omitempty"`
}

func (x *SubtaskGetByIDResponse) Reset() {
	*x = SubtaskGetByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_subtask_subtask_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubtaskGetByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubtaskGetByIDResponse) ProtoMessage() {}

func (x *SubtaskGetByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_subtask_subtask_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubtaskGetByIDResponse.ProtoReflect.Descriptor instead.
func (*SubtaskGetByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_subtask_subtask_proto_rawDescGZIP(), []int{8}
}

func (x *SubtaskGetByIDResponse) GetSubtask() *Subtask {
	if x != nil {
		return x.Subtask
	}
	return nil
}

var File_api_tasks_subtask_subtask_proto protoreflect.FileDescriptor

var file_api_tasks_subtask_subtask_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x06,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32,
	0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x71, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x60, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x27,
	0x0a, 0x15, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x5c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x27,
	0x0a, 0x15, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf3, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x74, 0x0a,
	0x12, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x16,
	0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e,
	0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x32, 0xa8, 0x06, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0xc3, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01,
	0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0xc8,
	0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37,
	0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32,
	0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73,
	0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0xc8, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42,
	0x85, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x4b, 0x2f, 0x63, 0x72,
	0x6e, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x73, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x3b, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x92, 0x41, 0x37,
	0x12, 0x0e, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x32, 0x03, 0x30, 0x2e, 0x31,
	0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_tasks_subtask_subtask_proto_rawDescOnce sync.Once
	file_api_tasks_subtask_subtask_proto_rawDescData = file_api_tasks_subtask_subtask_proto_rawDesc
)

func file_api_tasks_subtask_subtask_proto_rawDescGZIP() []byte {
	file_api_tasks_subtask_subtask_proto_rawDescOnce.Do(func() {
		file_api_tasks_subtask_subtask_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_tasks_subtask_subtask_proto_rawDescData)
	})
	return file_api_tasks_subtask_subtask_proto_rawDescData
}

var file_api_tasks_subtask_subtask_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_tasks_subtask_subtask_proto_goTypes = []interface{}{
	(*Subtask)(nil),                // 0: github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask
	(*SubtaskCreateRequest)(nil),   // 1: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskCreateRequest
	(*SubtaskCreateResponse)(nil),  // 2: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskCreateResponse
	(*SubtaskUpdateRequest)(nil),   // 3: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskUpdateRequest
	(*SubtaskUpdateResponse)(nil),  // 4: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskUpdateResponse
	(*SubtaskGetRequest)(nil),      // 5: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetRequest
	(*SubtaskGetResponse)(nil),     // 6: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetResponse
	(*SubtaskGetByIDRequest)(nil),  // 7: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetByIDRequest
	(*SubtaskGetByIDResponse)(nil), // 8: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetByIDResponse
	(*comments.Comment)(nil),       // 9: github.constantine27k.crnt_data_manager.api.comments.Comment
	(template.Template)(0),         // 10: github.constantine27k.crnt_data_manager.api.state.template.Template
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
	(*status.TaskStatus)(nil),      // 12: github.constantine27k.crnt_data_manager.api.state.status.TaskStatus
	(priority.Priority)(0),         // 13: github.constantine27k.crnt_data_manager.api.state.priority.Priority
}
var file_api_tasks_subtask_subtask_proto_depIdxs = []int32{
	9,  // 0: github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask.comments:type_name -> github.constantine27k.crnt_data_manager.api.comments.Comment
	10, // 1: github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask.template:type_name -> github.constantine27k.crnt_data_manager.api.state.template.Template
	11, // 2: github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask.created_at:type_name -> google.protobuf.Timestamp
	11, // 3: github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask.deadline:type_name -> google.protobuf.Timestamp
	11, // 4: github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask.updated_at:type_name -> google.protobuf.Timestamp
	12, // 5: github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask.status:type_name -> github.constantine27k.crnt_data_manager.api.state.status.TaskStatus
	13, // 6: github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask.priority:type_name -> github.constantine27k.crnt_data_manager.api.state.priority.Priority
	0,  // 7: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskCreateRequest.subtask:type_name -> github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask
	0,  // 8: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskUpdateRequest.subtask:type_name -> github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask
	12, // 9: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetRequest.status:type_name -> github.constantine27k.crnt_data_manager.api.state.status.TaskStatus
	0,  // 10: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetResponse.subtasks:type_name -> github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask
	0,  // 11: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetByIDResponse.subtask:type_name -> github.constantine27k.crnt_data_manager.api.tasks.subtask.Subtask
	1,  // 12: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry.Create:input_type -> github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskCreateRequest
	3,  // 13: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry.Update:input_type -> github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskUpdateRequest
	5,  // 14: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry.Get:input_type -> github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetRequest
	7,  // 15: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry.GetByID:input_type -> github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetByIDRequest
	2,  // 16: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry.Create:output_type -> github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskCreateResponse
	4,  // 17: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry.Update:output_type -> github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskUpdateResponse
	6,  // 18: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry.Get:output_type -> github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetResponse
	8,  // 19: github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskRegistry.GetByID:output_type -> github.constantine27k.crnt_data_manager.api.tasks.subtask.SubtaskGetByIDResponse
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_tasks_subtask_subtask_proto_init() }
func file_api_tasks_subtask_subtask_proto_init() {
	if File_api_tasks_subtask_subtask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_tasks_subtask_subtask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subtask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_subtask_subtask_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_subtask_subtask_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_subtask_subtask_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_subtask_subtask_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_subtask_subtask_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_subtask_subtask_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_subtask_subtask_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskGetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_subtask_subtask_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubtaskGetByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_tasks_subtask_subtask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_tasks_subtask_subtask_proto_goTypes,
		DependencyIndexes: file_api_tasks_subtask_subtask_proto_depIdxs,
		MessageInfos:      file_api_tasks_subtask_subtask_proto_msgTypes,
	}.Build()
	File_api_tasks_subtask_subtask_proto = out.File
	file_api_tasks_subtask_subtask_proto_rawDesc = nil
	file_api_tasks_subtask_subtask_proto_goTypes = nil
	file_api_tasks_subtask_subtask_proto_depIdxs = nil
}
