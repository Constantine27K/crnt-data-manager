// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/tasks/task/task.proto

package task

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskRegistryClient is the client API for TaskRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskRegistryClient interface {
	CreateTask(ctx context.Context, in *TaskCreateRequest, opts ...grpc.CallOption) (*TaskCreateResponse, error)
	UpdateTask(ctx context.Context, in *TaskUpdateRequest, opts ...grpc.CallOption) (*TaskUpdateResponse, error)
	GetTasks(ctx context.Context, in *TaskGetRequest, opts ...grpc.CallOption) (*TaskGetResponse, error)
	GetTaskByID(ctx context.Context, in *TaskGetByIDRequest, opts ...grpc.CallOption) (*TaskGetByIDResponse, error)
	GetTaskInfo(ctx context.Context, in *TaskInfoGetRequest, opts ...grpc.CallOption) (*TaskInfoGetResponse, error)
	GetTaskInfoByID(ctx context.Context, in *TaskInfoGetByIDRequest, opts ...grpc.CallOption) (*TaskInfoGetByIDResponse, error)
}

type taskRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskRegistryClient(cc grpc.ClientConnInterface) TaskRegistryClient {
	return &taskRegistryClient{cc}
}

func (c *taskRegistryClient) CreateTask(ctx context.Context, in *TaskCreateRequest, opts ...grpc.CallOption) (*TaskCreateResponse, error) {
	out := new(TaskCreateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRegistryClient) UpdateTask(ctx context.Context, in *TaskUpdateRequest, opts ...grpc.CallOption) (*TaskUpdateResponse, error) {
	out := new(TaskUpdateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRegistryClient) GetTasks(ctx context.Context, in *TaskGetRequest, opts ...grpc.CallOption) (*TaskGetResponse, error) {
	out := new(TaskGetResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRegistryClient) GetTaskByID(ctx context.Context, in *TaskGetByIDRequest, opts ...grpc.CallOption) (*TaskGetByIDResponse, error) {
	out := new(TaskGetByIDResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/GetTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRegistryClient) GetTaskInfo(ctx context.Context, in *TaskInfoGetRequest, opts ...grpc.CallOption) (*TaskInfoGetResponse, error) {
	out := new(TaskInfoGetResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/GetTaskInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskRegistryClient) GetTaskInfoByID(ctx context.Context, in *TaskInfoGetByIDRequest, opts ...grpc.CallOption) (*TaskInfoGetByIDResponse, error) {
	out := new(TaskInfoGetByIDResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/GetTaskInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskRegistryServer is the server API for TaskRegistry service.
// All implementations should embed UnimplementedTaskRegistryServer
// for forward compatibility
type TaskRegistryServer interface {
	CreateTask(context.Context, *TaskCreateRequest) (*TaskCreateResponse, error)
	UpdateTask(context.Context, *TaskUpdateRequest) (*TaskUpdateResponse, error)
	GetTasks(context.Context, *TaskGetRequest) (*TaskGetResponse, error)
	GetTaskByID(context.Context, *TaskGetByIDRequest) (*TaskGetByIDResponse, error)
	GetTaskInfo(context.Context, *TaskInfoGetRequest) (*TaskInfoGetResponse, error)
	GetTaskInfoByID(context.Context, *TaskInfoGetByIDRequest) (*TaskInfoGetByIDResponse, error)
}

// UnimplementedTaskRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedTaskRegistryServer struct {
}

func (UnimplementedTaskRegistryServer) CreateTask(context.Context, *TaskCreateRequest) (*TaskCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskRegistryServer) UpdateTask(context.Context, *TaskUpdateRequest) (*TaskUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskRegistryServer) GetTasks(context.Context, *TaskGetRequest) (*TaskGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedTaskRegistryServer) GetTaskByID(context.Context, *TaskGetByIDRequest) (*TaskGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskByID not implemented")
}
func (UnimplementedTaskRegistryServer) GetTaskInfo(context.Context, *TaskInfoGetRequest) (*TaskInfoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInfo not implemented")
}
func (UnimplementedTaskRegistryServer) GetTaskInfoByID(context.Context, *TaskInfoGetByIDRequest) (*TaskInfoGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInfoByID not implemented")
}

// UnsafeTaskRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskRegistryServer will
// result in compilation errors.
type UnsafeTaskRegistryServer interface {
	mustEmbedUnimplementedTaskRegistryServer()
}

func RegisterTaskRegistryServer(s grpc.ServiceRegistrar, srv TaskRegistryServer) {
	s.RegisterService(&TaskRegistry_ServiceDesc, srv)
}

func _TaskRegistry_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRegistryServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRegistryServer).CreateTask(ctx, req.(*TaskCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRegistry_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRegistryServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRegistryServer).UpdateTask(ctx, req.(*TaskUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRegistry_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRegistryServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRegistryServer).GetTasks(ctx, req.(*TaskGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRegistry_GetTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRegistryServer).GetTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/GetTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRegistryServer).GetTaskByID(ctx, req.(*TaskGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRegistry_GetTaskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInfoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRegistryServer).GetTaskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/GetTaskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRegistryServer).GetTaskInfo(ctx, req.(*TaskInfoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskRegistry_GetTaskInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInfoGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskRegistryServer).GetTaskInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry/GetTaskInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskRegistryServer).GetTaskInfoByID(ctx, req.(*TaskInfoGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskRegistry_ServiceDesc is the grpc.ServiceDesc for TaskRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.constantine27k.crnt_data_manager.api.tasks.task.TaskRegistry",
	HandlerType: (*TaskRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskRegistry_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskRegistry_UpdateTask_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _TaskRegistry_GetTasks_Handler,
		},
		{
			MethodName: "GetTaskByID",
			Handler:    _TaskRegistry_GetTaskByID_Handler,
		},
		{
			MethodName: "GetTaskInfo",
			Handler:    _TaskRegistry_GetTaskInfo_Handler,
		},
		{
			MethodName: "GetTaskInfoByID",
			Handler:    _TaskRegistry_GetTaskInfoByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tasks/task/task.proto",
}
