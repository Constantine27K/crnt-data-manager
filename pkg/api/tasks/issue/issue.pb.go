// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: api/tasks/issue/issue.proto

package issue

import (
	comments "github.com/Constantine27K/crnt-data-manager/pkg/api/comments"
	priority "github.com/Constantine27K/crnt-data-manager/pkg/api/state/priority"
	status "github.com/Constantine27K/crnt-data-manager/pkg/api/state/status"
	template "github.com/Constantine27K/crnt-data-manager/pkg/api/state/template"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IssueType int32

const (
	IssueType_ISSUE_TYPE_UNKNOWN IssueType = 0
	IssueType_ISSUE_TYPE_STORY   IssueType = 1
	IssueType_ISSUE_TYPE_TASK    IssueType = 2
	IssueType_ISSUE_TYPE_SUBTASK IssueType = 3
)

// Enum value maps for IssueType.
var (
	IssueType_name = map[int32]string{
		0: "ISSUE_TYPE_UNKNOWN",
		1: "ISSUE_TYPE_STORY",
		2: "ISSUE_TYPE_TASK",
		3: "ISSUE_TYPE_SUBTASK",
	}
	IssueType_value = map[string]int32{
		"ISSUE_TYPE_UNKNOWN": 0,
		"ISSUE_TYPE_STORY":   1,
		"ISSUE_TYPE_TASK":    2,
		"ISSUE_TYPE_SUBTASK": 3,
	}
)

func (x IssueType) Enum() *IssueType {
	p := new(IssueType)
	*p = x
	return p
}

func (x IssueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_tasks_issue_issue_proto_enumTypes[0].Descriptor()
}

func (IssueType) Type() protoreflect.EnumType {
	return &file_api_tasks_issue_issue_proto_enumTypes[0]
}

func (x IssueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueType.Descriptor instead.
func (IssueType) EnumDescriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{0}
}

type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompositeName string                 `protobuf:"bytes,2,opt,name=composite_name,json=compositeName,proto3" json:"composite_name,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type          IssueType              `protobuf:"varint,4,opt,name=type,proto3,enum=github.constantine27k.crnt_data_manager.api.tasks.issue.IssueType" json:"type,omitempty"`
	ParentId      int64                  `protobuf:"varint,5,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Comments      []*comments.Comment    `protobuf:"bytes,7,rep,name=comments,proto3" json:"comments,omitempty"`
	Author        string                 `protobuf:"bytes,8,opt,name=author,proto3" json:"author,omitempty"`
	Assigned      string                 `protobuf:"bytes,9,opt,name=assigned,proto3" json:"assigned,omitempty"`
	Qa            string                 `protobuf:"bytes,10,opt,name=qa,proto3" json:"qa,omitempty"`
	Reviewer      string                 `protobuf:"bytes,11,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	Template      template.Template      `protobuf:"varint,12,opt,name=template,proto3,enum=github.constantine27k.crnt_data_manager.api.state.template.Template" json:"template,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Deadline      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=deadline,proto3" json:"deadline,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status        *status.TaskStatus     `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	Priority      priority.Priority      `protobuf:"varint,17,opt,name=priority,proto3,enum=github.constantine27k.crnt_data_manager.api.state.priority.Priority" json:"priority,omitempty"`
	SprintId      int64                  `protobuf:"varint,18,opt,name=sprint_id,json=sprintId,proto3" json:"sprint_id,omitempty"`
	ProjectId     int64                  `protobuf:"varint,19,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ComponentId   []int64                `protobuf:"varint,20,rep,packed,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	StoryPoints   int64                  `protobuf:"varint,21,opt,name=story_points,json=storyPoints,proto3" json:"story_points,omitempty"`
	Children      []*Issue               `protobuf:"bytes,22,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{0}
}

func (x *Issue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Issue) GetCompositeName() string {
	if x != nil {
		return x.CompositeName
	}
	return ""
}

func (x *Issue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Issue) GetType() IssueType {
	if x != nil {
		return x.Type
	}
	return IssueType_ISSUE_TYPE_UNKNOWN
}

func (x *Issue) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Issue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Issue) GetComments() []*comments.Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Issue) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Issue) GetAssigned() string {
	if x != nil {
		return x.Assigned
	}
	return ""
}

func (x *Issue) GetQa() string {
	if x != nil {
		return x.Qa
	}
	return ""
}

func (x *Issue) GetReviewer() string {
	if x != nil {
		return x.Reviewer
	}
	return ""
}

func (x *Issue) GetTemplate() template.Template {
	if x != nil {
		return x.Template
	}
	return template.Template(0)
}

func (x *Issue) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Issue) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *Issue) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Issue) GetStatus() *status.TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Issue) GetPriority() priority.Priority {
	if x != nil {
		return x.Priority
	}
	return priority.Priority(0)
}

func (x *Issue) GetSprintId() int64 {
	if x != nil {
		return x.SprintId
	}
	return 0
}

func (x *Issue) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Issue) GetComponentId() []int64 {
	if x != nil {
		return x.ComponentId
	}
	return nil
}

func (x *Issue) GetStoryPoints() int64 {
	if x != nil {
		return x.StoryPoints
	}
	return 0
}

func (x *Issue) GetChildren() []*Issue {
	if x != nil {
		return x.Children
	}
	return nil
}

type IssueInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CompositeName string            `protobuf:"bytes,2,opt,name=composite_name,json=compositeName,proto3" json:"composite_name,omitempty"`
	Name          string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type          IssueType         `protobuf:"varint,4,opt,name=type,proto3,enum=github.constantine27k.crnt_data_manager.api.tasks.issue.IssueType" json:"type,omitempty"`
	Assigned      string            `protobuf:"bytes,5,opt,name=assigned,proto3" json:"assigned,omitempty"`
	Priority      priority.Priority `protobuf:"varint,6,opt,name=priority,proto3,enum=github.constantine27k.crnt_data_manager.api.state.priority.Priority" json:"priority,omitempty"`
	StoryPoints   int64             `protobuf:"varint,7,opt,name=story_points,json=storyPoints,proto3" json:"story_points,omitempty"`
}

func (x *IssueInfo) Reset() {
	*x = IssueInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueInfo) ProtoMessage() {}

func (x *IssueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueInfo.ProtoReflect.Descriptor instead.
func (*IssueInfo) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{1}
}

func (x *IssueInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IssueInfo) GetCompositeName() string {
	if x != nil {
		return x.CompositeName
	}
	return ""
}

func (x *IssueInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IssueInfo) GetType() IssueType {
	if x != nil {
		return x.Type
	}
	return IssueType_ISSUE_TYPE_UNKNOWN
}

func (x *IssueInfo) GetAssigned() string {
	if x != nil {
		return x.Assigned
	}
	return ""
}

func (x *IssueInfo) GetPriority() priority.Priority {
	if x != nil {
		return x.Priority
	}
	return priority.Priority(0)
}

func (x *IssueInfo) GetStoryPoints() int64 {
	if x != nil {
		return x.StoryPoints
	}
	return 0
}

type IssueCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue *Issue `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
}

func (x *IssueCreateRequest) Reset() {
	*x = IssueCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCreateRequest) ProtoMessage() {}

func (x *IssueCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCreateRequest.ProtoReflect.Descriptor instead.
func (*IssueCreateRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{2}
}

func (x *IssueCreateRequest) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

type IssueCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IssueCreateResponse) Reset() {
	*x = IssueCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCreateResponse) ProtoMessage() {}

func (x *IssueCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCreateResponse.ProtoReflect.Descriptor instead.
func (*IssueCreateResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{3}
}

func (x *IssueCreateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IssueCreateSubtaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Child *Issue `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *IssueCreateSubtaskRequest) Reset() {
	*x = IssueCreateSubtaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCreateSubtaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCreateSubtaskRequest) ProtoMessage() {}

func (x *IssueCreateSubtaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCreateSubtaskRequest.ProtoReflect.Descriptor instead.
func (*IssueCreateSubtaskRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{4}
}

func (x *IssueCreateSubtaskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IssueCreateSubtaskRequest) GetChild() *Issue {
	if x != nil {
		return x.Child
	}
	return nil
}

type IssueCreateSubtaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IssueCreateSubtaskResponse) Reset() {
	*x = IssueCreateSubtaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCreateSubtaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCreateSubtaskResponse) ProtoMessage() {}

func (x *IssueCreateSubtaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCreateSubtaskResponse.ProtoReflect.Descriptor instead.
func (*IssueCreateSubtaskResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{5}
}

func (x *IssueCreateSubtaskResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IssueUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Issue *Issue `protobuf:"bytes,2,opt,name=issue,proto3" json:"issue,omitempty"`
}

func (x *IssueUpdateRequest) Reset() {
	*x = IssueUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueUpdateRequest) ProtoMessage() {}

func (x *IssueUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueUpdateRequest.ProtoReflect.Descriptor instead.
func (*IssueUpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{6}
}

func (x *IssueUpdateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IssueUpdateRequest) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

type IssueUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IssueUpdateResponse) Reset() {
	*x = IssueUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueUpdateResponse) ProtoMessage() {}

func (x *IssueUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueUpdateResponse.ProtoReflect.Descriptor instead.
func (*IssueUpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{7}
}

func (x *IssueUpdateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IssueGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []int64            `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ParentIds []int64            `protobuf:"varint,2,rep,packed,name=parent_ids,json=parentIds,proto3" json:"parent_ids,omitempty"`
	Type      IssueType          `protobuf:"varint,3,opt,name=type,proto3,enum=github.constantine27k.crnt_data_manager.api.tasks.issue.IssueType" json:"type,omitempty"`
	Author    string             `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Assigned  string             `protobuf:"bytes,5,opt,name=assigned,proto3" json:"assigned,omitempty"`
	SprintId  int64              `protobuf:"varint,6,opt,name=sprint_id,json=sprintId,proto3" json:"sprint_id,omitempty"`
	ProjectId int64              `protobuf:"varint,7,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Status    *status.TaskStatus `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IssueGetRequest) Reset() {
	*x = IssueGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueGetRequest) ProtoMessage() {}

func (x *IssueGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueGetRequest.ProtoReflect.Descriptor instead.
func (*IssueGetRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{8}
}

func (x *IssueGetRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *IssueGetRequest) GetParentIds() []int64 {
	if x != nil {
		return x.ParentIds
	}
	return nil
}

func (x *IssueGetRequest) GetType() IssueType {
	if x != nil {
		return x.Type
	}
	return IssueType_ISSUE_TYPE_UNKNOWN
}

func (x *IssueGetRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *IssueGetRequest) GetAssigned() string {
	if x != nil {
		return x.Assigned
	}
	return ""
}

func (x *IssueGetRequest) GetSprintId() int64 {
	if x != nil {
		return x.SprintId
	}
	return 0
}

func (x *IssueGetRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *IssueGetRequest) GetStatus() *status.TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type IssueGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issues []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *IssueGetResponse) Reset() {
	*x = IssueGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueGetResponse) ProtoMessage() {}

func (x *IssueGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueGetResponse.ProtoReflect.Descriptor instead.
func (*IssueGetResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{9}
}

func (x *IssueGetResponse) GetIssues() []*Issue {
	if x != nil {
		return x.Issues
	}
	return nil
}

type IssueInfoGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []int64            `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ParentIds []int64            `protobuf:"varint,2,rep,packed,name=parent_ids,json=parentIds,proto3" json:"parent_ids,omitempty"`
	Type      IssueType          `protobuf:"varint,3,opt,name=type,proto3,enum=github.constantine27k.crnt_data_manager.api.tasks.issue.IssueType" json:"type,omitempty"`
	Assigned  string             `protobuf:"bytes,4,opt,name=assigned,proto3" json:"assigned,omitempty"`
	SprintId  int64              `protobuf:"varint,5,opt,name=sprint_id,json=sprintId,proto3" json:"sprint_id,omitempty"`
	Status    *status.TaskStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IssueInfoGetRequest) Reset() {
	*x = IssueInfoGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueInfoGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueInfoGetRequest) ProtoMessage() {}

func (x *IssueInfoGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueInfoGetRequest.ProtoReflect.Descriptor instead.
func (*IssueInfoGetRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{10}
}

func (x *IssueInfoGetRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *IssueInfoGetRequest) GetParentIds() []int64 {
	if x != nil {
		return x.ParentIds
	}
	return nil
}

func (x *IssueInfoGetRequest) GetType() IssueType {
	if x != nil {
		return x.Type
	}
	return IssueType_ISSUE_TYPE_UNKNOWN
}

func (x *IssueInfoGetRequest) GetAssigned() string {
	if x != nil {
		return x.Assigned
	}
	return ""
}

func (x *IssueInfoGetRequest) GetSprintId() int64 {
	if x != nil {
		return x.SprintId
	}
	return 0
}

func (x *IssueInfoGetRequest) GetStatus() *status.TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type IssueInfoGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo []*IssueInfo `protobuf:"bytes,1,rep,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (x *IssueInfoGetResponse) Reset() {
	*x = IssueInfoGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueInfoGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueInfoGetResponse) ProtoMessage() {}

func (x *IssueInfoGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueInfoGetResponse.ProtoReflect.Descriptor instead.
func (*IssueInfoGetResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{11}
}

func (x *IssueInfoGetResponse) GetTaskInfo() []*IssueInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

type IssueGetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IssueGetByIDRequest) Reset() {
	*x = IssueGetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueGetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueGetByIDRequest) ProtoMessage() {}

func (x *IssueGetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueGetByIDRequest.ProtoReflect.Descriptor instead.
func (*IssueGetByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{12}
}

func (x *IssueGetByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IssueGetByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Issue `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *IssueGetByIDResponse) Reset() {
	*x = IssueGetByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueGetByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueGetByIDResponse) ProtoMessage() {}

func (x *IssueGetByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueGetByIDResponse.ProtoReflect.Descriptor instead.
func (*IssueGetByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{13}
}

func (x *IssueGetByIDResponse) GetTask() *Issue {
	if x != nil {
		return x.Task
	}
	return nil
}

type IssueInfoGetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IssueInfoGetByIDRequest) Reset() {
	*x = IssueInfoGetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueInfoGetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueInfoGetByIDRequest) ProtoMessage() {}

func (x *IssueInfoGetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueInfoGetByIDRequest.ProtoReflect.Descriptor instead.
func (*IssueInfoGetByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{14}
}

func (x *IssueInfoGetByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IssueInfoGetByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo *IssueInfo `protobuf:"bytes,1,opt,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (x *IssueInfoGetByIDResponse) Reset() {
	*x = IssueInfoGetByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_tasks_issue_issue_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueInfoGetByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueInfoGetByIDResponse) ProtoMessage() {}

func (x *IssueInfoGetByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_tasks_issue_issue_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueInfoGetByIDResponse.ProtoReflect.Descriptor instead.
func (*IssueInfoGetByIDResponse) Descriptor() ([]byte, []int) {
	return file_api_tasks_issue_issue_proto_rawDescGZIP(), []int{15}
}

func (x *IssueInfoGetByIDResponse) GetTaskInfo() *IssueInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

var File_api_tasks_issue_issue_proto protoreflect.FileDescriptor

var file_api_tasks_issue_issue_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x08, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32,
	0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x71, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x60,
	0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x5a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xcf, 0x02, 0x0a,
	0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x6a,
	0x0a, 0x12, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x81, 0x01, 0x0a, 0x19, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x54, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x12, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x05, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b,
	0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x22,
	0x25, 0x0a, 0x13, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe8, 0x02, 0x0a, 0x0f, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37,
	0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x6a, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0xb5, 0x02,
	0x0a, 0x13, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e,
	0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x77, 0x0a, 0x14, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25,
	0x0a, 0x13, 0x49, 0x73, 0x73, 0x75, 0x65, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x14, 0x49, 0x73, 0x73, 0x75, 0x65, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x22, 0x29, 0x0a, 0x17, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x18,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0x66, 0x0a, 0x09, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x53, 0x53,
	0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x41, 0x53, 0x4b, 0x10,
	0x03, 0x32, 0x8e, 0x0b, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x12, 0xbe, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x12, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x12, 0xdb, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x52, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63,
	0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32,
	0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x12, 0xc3, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xb4, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63,
	0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x49, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12,
	0xc3, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc3, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63,
	0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0xd4, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x51, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x6b, 0x2e, 0x63, 0x72, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x42, 0x7f, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x32, 0x37, 0x4b, 0x2f,
	0x63, 0x72, 0x6e, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x3b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x92, 0x41, 0x35, 0x12, 0x0c,
	0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x32, 0x03, 0x30, 0x2e, 0x31, 0x2a, 0x01, 0x01, 0x32,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_tasks_issue_issue_proto_rawDescOnce sync.Once
	file_api_tasks_issue_issue_proto_rawDescData = file_api_tasks_issue_issue_proto_rawDesc
)

func file_api_tasks_issue_issue_proto_rawDescGZIP() []byte {
	file_api_tasks_issue_issue_proto_rawDescOnce.Do(func() {
		file_api_tasks_issue_issue_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_tasks_issue_issue_proto_rawDescData)
	})
	return file_api_tasks_issue_issue_proto_rawDescData
}

var file_api_tasks_issue_issue_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_tasks_issue_issue_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_tasks_issue_issue_proto_goTypes = []interface{}{
	(IssueType)(0),                     // 0: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueType
	(*Issue)(nil),                      // 1: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue
	(*IssueInfo)(nil),                  // 2: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfo
	(*IssueCreateRequest)(nil),         // 3: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateRequest
	(*IssueCreateResponse)(nil),        // 4: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateResponse
	(*IssueCreateSubtaskRequest)(nil),  // 5: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateSubtaskRequest
	(*IssueCreateSubtaskResponse)(nil), // 6: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateSubtaskResponse
	(*IssueUpdateRequest)(nil),         // 7: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueUpdateRequest
	(*IssueUpdateResponse)(nil),        // 8: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueUpdateResponse
	(*IssueGetRequest)(nil),            // 9: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetRequest
	(*IssueGetResponse)(nil),           // 10: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetResponse
	(*IssueInfoGetRequest)(nil),        // 11: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetRequest
	(*IssueInfoGetResponse)(nil),       // 12: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetResponse
	(*IssueGetByIDRequest)(nil),        // 13: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetByIDRequest
	(*IssueGetByIDResponse)(nil),       // 14: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetByIDResponse
	(*IssueInfoGetByIDRequest)(nil),    // 15: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetByIDRequest
	(*IssueInfoGetByIDResponse)(nil),   // 16: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetByIDResponse
	(*comments.Comment)(nil),           // 17: github.constantine27k.crnt_data_manager.api.comments.Comment
	(template.Template)(0),             // 18: github.constantine27k.crnt_data_manager.api.state.template.Template
	(*timestamppb.Timestamp)(nil),      // 19: google.protobuf.Timestamp
	(*status.TaskStatus)(nil),          // 20: github.constantine27k.crnt_data_manager.api.state.status.TaskStatus
	(priority.Priority)(0),             // 21: github.constantine27k.crnt_data_manager.api.state.priority.Priority
}
var file_api_tasks_issue_issue_proto_depIdxs = []int32{
	0,  // 0: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue.type:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueType
	17, // 1: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue.comments:type_name -> github.constantine27k.crnt_data_manager.api.comments.Comment
	18, // 2: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue.template:type_name -> github.constantine27k.crnt_data_manager.api.state.template.Template
	19, // 3: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue.created_at:type_name -> google.protobuf.Timestamp
	19, // 4: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue.deadline:type_name -> google.protobuf.Timestamp
	19, // 5: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue.updated_at:type_name -> google.protobuf.Timestamp
	20, // 6: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue.status:type_name -> github.constantine27k.crnt_data_manager.api.state.status.TaskStatus
	21, // 7: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue.priority:type_name -> github.constantine27k.crnt_data_manager.api.state.priority.Priority
	1,  // 8: github.constantine27k.crnt_data_manager.api.tasks.issue.Issue.children:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.Issue
	0,  // 9: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfo.type:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueType
	21, // 10: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfo.priority:type_name -> github.constantine27k.crnt_data_manager.api.state.priority.Priority
	1,  // 11: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateRequest.issue:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.Issue
	1,  // 12: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateSubtaskRequest.child:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.Issue
	1,  // 13: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueUpdateRequest.issue:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.Issue
	0,  // 14: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetRequest.type:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueType
	20, // 15: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetRequest.status:type_name -> github.constantine27k.crnt_data_manager.api.state.status.TaskStatus
	1,  // 16: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetResponse.issues:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.Issue
	0,  // 17: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetRequest.type:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueType
	20, // 18: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetRequest.status:type_name -> github.constantine27k.crnt_data_manager.api.state.status.TaskStatus
	2,  // 19: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetResponse.task_info:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfo
	1,  // 20: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetByIDResponse.task:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.Issue
	2,  // 21: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetByIDResponse.task_info:type_name -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfo
	3,  // 22: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.CreateIssue:input_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateRequest
	5,  // 23: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.CreateSubtask:input_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateSubtaskRequest
	7,  // 24: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.UpdateIssue:input_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueUpdateRequest
	9,  // 25: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.GetIssues:input_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetRequest
	13, // 26: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.GetIssueByID:input_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetByIDRequest
	11, // 27: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.GetIssueInfo:input_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetRequest
	15, // 28: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.GetIssueInfoByID:input_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetByIDRequest
	4,  // 29: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.CreateIssue:output_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateResponse
	6,  // 30: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.CreateSubtask:output_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueCreateSubtaskResponse
	8,  // 31: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.UpdateIssue:output_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueUpdateResponse
	10, // 32: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.GetIssues:output_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetResponse
	14, // 33: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.GetIssueByID:output_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueGetByIDResponse
	12, // 34: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.GetIssueInfo:output_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetResponse
	16, // 35: github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry.GetIssueInfoByID:output_type -> github.constantine27k.crnt_data_manager.api.tasks.issue.IssueInfoGetByIDResponse
	29, // [29:36] is the sub-list for method output_type
	22, // [22:29] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_api_tasks_issue_issue_proto_init() }
func file_api_tasks_issue_issue_proto_init() {
	if File_api_tasks_issue_issue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_tasks_issue_issue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCreateSubtaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCreateSubtaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueInfoGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueInfoGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueGetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueGetByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueInfoGetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_tasks_issue_issue_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueInfoGetByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_tasks_issue_issue_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_tasks_issue_issue_proto_goTypes,
		DependencyIndexes: file_api_tasks_issue_issue_proto_depIdxs,
		EnumInfos:         file_api_tasks_issue_issue_proto_enumTypes,
		MessageInfos:      file_api_tasks_issue_issue_proto_msgTypes,
	}.Build()
	File_api_tasks_issue_issue_proto = out.File
	file_api_tasks_issue_issue_proto_rawDesc = nil
	file_api_tasks_issue_issue_proto_goTypes = nil
	file_api_tasks_issue_issue_proto_depIdxs = nil
}
