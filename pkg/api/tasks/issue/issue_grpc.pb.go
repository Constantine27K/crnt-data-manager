// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/tasks/issue/issue.proto

package issue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IssueRegistryClient is the client API for IssueRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssueRegistryClient interface {
	CreateIssue(ctx context.Context, in *IssueCreateRequest, opts ...grpc.CallOption) (*IssueCreateResponse, error)
	CreateSubtask(ctx context.Context, in *IssueCreateSubtaskRequest, opts ...grpc.CallOption) (*IssueCreateSubtaskResponse, error)
	UpdateIssue(ctx context.Context, in *IssueUpdateRequest, opts ...grpc.CallOption) (*IssueUpdateResponse, error)
	GetIssues(ctx context.Context, in *IssueGetRequest, opts ...grpc.CallOption) (*IssueGetResponse, error)
	GetIssueByID(ctx context.Context, in *IssueGetByIDRequest, opts ...grpc.CallOption) (*IssueGetByIDResponse, error)
	GetIssueInfo(ctx context.Context, in *IssueInfoGetRequest, opts ...grpc.CallOption) (*IssueInfoGetResponse, error)
	GetIssueInfoByID(ctx context.Context, in *IssueInfoGetByIDRequest, opts ...grpc.CallOption) (*IssueInfoGetByIDResponse, error)
}

type issueRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewIssueRegistryClient(cc grpc.ClientConnInterface) IssueRegistryClient {
	return &issueRegistryClient{cc}
}

func (c *issueRegistryClient) CreateIssue(ctx context.Context, in *IssueCreateRequest, opts ...grpc.CallOption) (*IssueCreateResponse, error) {
	out := new(IssueCreateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/CreateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRegistryClient) CreateSubtask(ctx context.Context, in *IssueCreateSubtaskRequest, opts ...grpc.CallOption) (*IssueCreateSubtaskResponse, error) {
	out := new(IssueCreateSubtaskResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/CreateSubtask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRegistryClient) UpdateIssue(ctx context.Context, in *IssueUpdateRequest, opts ...grpc.CallOption) (*IssueUpdateResponse, error) {
	out := new(IssueUpdateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/UpdateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRegistryClient) GetIssues(ctx context.Context, in *IssueGetRequest, opts ...grpc.CallOption) (*IssueGetResponse, error) {
	out := new(IssueGetResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/GetIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRegistryClient) GetIssueByID(ctx context.Context, in *IssueGetByIDRequest, opts ...grpc.CallOption) (*IssueGetByIDResponse, error) {
	out := new(IssueGetByIDResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/GetIssueByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRegistryClient) GetIssueInfo(ctx context.Context, in *IssueInfoGetRequest, opts ...grpc.CallOption) (*IssueInfoGetResponse, error) {
	out := new(IssueInfoGetResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/GetIssueInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueRegistryClient) GetIssueInfoByID(ctx context.Context, in *IssueInfoGetByIDRequest, opts ...grpc.CallOption) (*IssueInfoGetByIDResponse, error) {
	out := new(IssueInfoGetByIDResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/GetIssueInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueRegistryServer is the server API for IssueRegistry service.
// All implementations should embed UnimplementedIssueRegistryServer
// for forward compatibility
type IssueRegistryServer interface {
	CreateIssue(context.Context, *IssueCreateRequest) (*IssueCreateResponse, error)
	CreateSubtask(context.Context, *IssueCreateSubtaskRequest) (*IssueCreateSubtaskResponse, error)
	UpdateIssue(context.Context, *IssueUpdateRequest) (*IssueUpdateResponse, error)
	GetIssues(context.Context, *IssueGetRequest) (*IssueGetResponse, error)
	GetIssueByID(context.Context, *IssueGetByIDRequest) (*IssueGetByIDResponse, error)
	GetIssueInfo(context.Context, *IssueInfoGetRequest) (*IssueInfoGetResponse, error)
	GetIssueInfoByID(context.Context, *IssueInfoGetByIDRequest) (*IssueInfoGetByIDResponse, error)
}

// UnimplementedIssueRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedIssueRegistryServer struct {
}

func (UnimplementedIssueRegistryServer) CreateIssue(context.Context, *IssueCreateRequest) (*IssueCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssue not implemented")
}
func (UnimplementedIssueRegistryServer) CreateSubtask(context.Context, *IssueCreateSubtaskRequest) (*IssueCreateSubtaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubtask not implemented")
}
func (UnimplementedIssueRegistryServer) UpdateIssue(context.Context, *IssueUpdateRequest) (*IssueUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssue not implemented")
}
func (UnimplementedIssueRegistryServer) GetIssues(context.Context, *IssueGetRequest) (*IssueGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssues not implemented")
}
func (UnimplementedIssueRegistryServer) GetIssueByID(context.Context, *IssueGetByIDRequest) (*IssueGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueByID not implemented")
}
func (UnimplementedIssueRegistryServer) GetIssueInfo(context.Context, *IssueInfoGetRequest) (*IssueInfoGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueInfo not implemented")
}
func (UnimplementedIssueRegistryServer) GetIssueInfoByID(context.Context, *IssueInfoGetByIDRequest) (*IssueInfoGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssueInfoByID not implemented")
}

// UnsafeIssueRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssueRegistryServer will
// result in compilation errors.
type UnsafeIssueRegistryServer interface {
	mustEmbedUnimplementedIssueRegistryServer()
}

func RegisterIssueRegistryServer(s grpc.ServiceRegistrar, srv IssueRegistryServer) {
	s.RegisterService(&IssueRegistry_ServiceDesc, srv)
}

func _IssueRegistry_CreateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRegistryServer).CreateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/CreateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRegistryServer).CreateIssue(ctx, req.(*IssueCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRegistry_CreateSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCreateSubtaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRegistryServer).CreateSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/CreateSubtask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRegistryServer).CreateSubtask(ctx, req.(*IssueCreateSubtaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRegistry_UpdateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRegistryServer).UpdateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/UpdateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRegistryServer).UpdateIssue(ctx, req.(*IssueUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRegistry_GetIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRegistryServer).GetIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/GetIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRegistryServer).GetIssues(ctx, req.(*IssueGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRegistry_GetIssueByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRegistryServer).GetIssueByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/GetIssueByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRegistryServer).GetIssueByID(ctx, req.(*IssueGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRegistry_GetIssueInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueInfoGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRegistryServer).GetIssueInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/GetIssueInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRegistryServer).GetIssueInfo(ctx, req.(*IssueInfoGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueRegistry_GetIssueInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueInfoGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueRegistryServer).GetIssueInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry/GetIssueInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueRegistryServer).GetIssueInfoByID(ctx, req.(*IssueInfoGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssueRegistry_ServiceDesc is the grpc.ServiceDesc for IssueRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssueRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.constantine27k.crnt_data_manager.api.tasks.issue.IssueRegistry",
	HandlerType: (*IssueRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIssue",
			Handler:    _IssueRegistry_CreateIssue_Handler,
		},
		{
			MethodName: "CreateSubtask",
			Handler:    _IssueRegistry_CreateSubtask_Handler,
		},
		{
			MethodName: "UpdateIssue",
			Handler:    _IssueRegistry_UpdateIssue_Handler,
		},
		{
			MethodName: "GetIssues",
			Handler:    _IssueRegistry_GetIssues_Handler,
		},
		{
			MethodName: "GetIssueByID",
			Handler:    _IssueRegistry_GetIssueByID_Handler,
		},
		{
			MethodName: "GetIssueInfo",
			Handler:    _IssueRegistry_GetIssueInfo_Handler,
		},
		{
			MethodName: "GetIssueInfoByID",
			Handler:    _IssueRegistry_GetIssueInfoByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tasks/issue/issue.proto",
}
