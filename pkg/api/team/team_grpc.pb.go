// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/team/team.proto

package team

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeamRegistryClient is the client API for TeamRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamRegistryClient interface {
	CreateTeam(ctx context.Context, in *TeamCreateRequest, opts ...grpc.CallOption) (*TeamCreateResponse, error)
	UpdateTeam(ctx context.Context, in *TeamUpdateRequest, opts ...grpc.CallOption) (*TeamUpdateResponse, error)
	GetTeams(ctx context.Context, in *TeamGetRequest, opts ...grpc.CallOption) (*TeamGetResponse, error)
	GetTeamByID(ctx context.Context, in *TeamGetByIDRequest, opts ...grpc.CallOption) (*TeamGetByIDResponse, error)
}

type teamRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamRegistryClient(cc grpc.ClientConnInterface) TeamRegistryClient {
	return &teamRegistryClient{cc}
}

func (c *teamRegistryClient) CreateTeam(ctx context.Context, in *TeamCreateRequest, opts ...grpc.CallOption) (*TeamCreateResponse, error) {
	out := new(TeamCreateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.team.TeamRegistry/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRegistryClient) UpdateTeam(ctx context.Context, in *TeamUpdateRequest, opts ...grpc.CallOption) (*TeamUpdateResponse, error) {
	out := new(TeamUpdateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.team.TeamRegistry/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRegistryClient) GetTeams(ctx context.Context, in *TeamGetRequest, opts ...grpc.CallOption) (*TeamGetResponse, error) {
	out := new(TeamGetResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.team.TeamRegistry/GetTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRegistryClient) GetTeamByID(ctx context.Context, in *TeamGetByIDRequest, opts ...grpc.CallOption) (*TeamGetByIDResponse, error) {
	out := new(TeamGetByIDResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.team.TeamRegistry/GetTeamByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamRegistryServer is the server API for TeamRegistry service.
// All implementations should embed UnimplementedTeamRegistryServer
// for forward compatibility
type TeamRegistryServer interface {
	CreateTeam(context.Context, *TeamCreateRequest) (*TeamCreateResponse, error)
	UpdateTeam(context.Context, *TeamUpdateRequest) (*TeamUpdateResponse, error)
	GetTeams(context.Context, *TeamGetRequest) (*TeamGetResponse, error)
	GetTeamByID(context.Context, *TeamGetByIDRequest) (*TeamGetByIDResponse, error)
}

// UnimplementedTeamRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedTeamRegistryServer struct {
}

func (UnimplementedTeamRegistryServer) CreateTeam(context.Context, *TeamCreateRequest) (*TeamCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedTeamRegistryServer) UpdateTeam(context.Context, *TeamUpdateRequest) (*TeamUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (UnimplementedTeamRegistryServer) GetTeams(context.Context, *TeamGetRequest) (*TeamGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (UnimplementedTeamRegistryServer) GetTeamByID(context.Context, *TeamGetByIDRequest) (*TeamGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamByID not implemented")
}

// UnsafeTeamRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamRegistryServer will
// result in compilation errors.
type UnsafeTeamRegistryServer interface {
	mustEmbedUnimplementedTeamRegistryServer()
}

func RegisterTeamRegistryServer(s grpc.ServiceRegistrar, srv TeamRegistryServer) {
	s.RegisterService(&TeamRegistry_ServiceDesc, srv)
}

func _TeamRegistry_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRegistryServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.team.TeamRegistry/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRegistryServer).CreateTeam(ctx, req.(*TeamCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRegistry_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRegistryServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.team.TeamRegistry/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRegistryServer).UpdateTeam(ctx, req.(*TeamUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRegistry_GetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRegistryServer).GetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.team.TeamRegistry/GetTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRegistryServer).GetTeams(ctx, req.(*TeamGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRegistry_GetTeamByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRegistryServer).GetTeamByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.team.TeamRegistry/GetTeamByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRegistryServer).GetTeamByID(ctx, req.(*TeamGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamRegistry_ServiceDesc is the grpc.ServiceDesc for TeamRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.constantine27k.crnt_data_manager.api.team.TeamRegistry",
	HandlerType: (*TeamRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeam",
			Handler:    _TeamRegistry_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _TeamRegistry_UpdateTeam_Handler,
		},
		{
			MethodName: "GetTeams",
			Handler:    _TeamRegistry_GetTeams_Handler,
		},
		{
			MethodName: "GetTeamByID",
			Handler:    _TeamRegistry_GetTeamByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/team/team.proto",
}
