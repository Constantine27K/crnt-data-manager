// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/department/department.proto

package department

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepartmentRegistryClient is the client API for DepartmentRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentRegistryClient interface {
	CreateDepartment(ctx context.Context, in *DepartmentCreateRequest, opts ...grpc.CallOption) (*DepartmentCreateResponse, error)
	DepartmentAddProject(ctx context.Context, in *DepartmentAddProjectRequest, opts ...grpc.CallOption) (*DepartmentAddProjectResponse, error)
	DepartmentRemoveProject(ctx context.Context, in *DepartmentRemoveProjectRequest, opts ...grpc.CallOption) (*DepartmentRemoveProjectResponse, error)
	GetDepartments(ctx context.Context, in *DepartmentGetRequest, opts ...grpc.CallOption) (*DepartmentGetResponse, error)
	GetDepartmentByID(ctx context.Context, in *DepartmentGetByIDRequest, opts ...grpc.CallOption) (*DepartmentGetByIDResponse, error)
	UpdateDepartment(ctx context.Context, in *DepartmentUpdateRequest, opts ...grpc.CallOption) (*DepartmentUpdateResponse, error)
}

type departmentRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentRegistryClient(cc grpc.ClientConnInterface) DepartmentRegistryClient {
	return &departmentRegistryClient{cc}
}

func (c *departmentRegistryClient) CreateDepartment(ctx context.Context, in *DepartmentCreateRequest, opts ...grpc.CallOption) (*DepartmentCreateResponse, error) {
	out := new(DepartmentCreateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentRegistryClient) DepartmentAddProject(ctx context.Context, in *DepartmentAddProjectRequest, opts ...grpc.CallOption) (*DepartmentAddProjectResponse, error) {
	out := new(DepartmentAddProjectResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/DepartmentAddProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentRegistryClient) DepartmentRemoveProject(ctx context.Context, in *DepartmentRemoveProjectRequest, opts ...grpc.CallOption) (*DepartmentRemoveProjectResponse, error) {
	out := new(DepartmentRemoveProjectResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/DepartmentRemoveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentRegistryClient) GetDepartments(ctx context.Context, in *DepartmentGetRequest, opts ...grpc.CallOption) (*DepartmentGetResponse, error) {
	out := new(DepartmentGetResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/GetDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentRegistryClient) GetDepartmentByID(ctx context.Context, in *DepartmentGetByIDRequest, opts ...grpc.CallOption) (*DepartmentGetByIDResponse, error) {
	out := new(DepartmentGetByIDResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/GetDepartmentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentRegistryClient) UpdateDepartment(ctx context.Context, in *DepartmentUpdateRequest, opts ...grpc.CallOption) (*DepartmentUpdateResponse, error) {
	out := new(DepartmentUpdateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentRegistryServer is the server API for DepartmentRegistry service.
// All implementations should embed UnimplementedDepartmentRegistryServer
// for forward compatibility
type DepartmentRegistryServer interface {
	CreateDepartment(context.Context, *DepartmentCreateRequest) (*DepartmentCreateResponse, error)
	DepartmentAddProject(context.Context, *DepartmentAddProjectRequest) (*DepartmentAddProjectResponse, error)
	DepartmentRemoveProject(context.Context, *DepartmentRemoveProjectRequest) (*DepartmentRemoveProjectResponse, error)
	GetDepartments(context.Context, *DepartmentGetRequest) (*DepartmentGetResponse, error)
	GetDepartmentByID(context.Context, *DepartmentGetByIDRequest) (*DepartmentGetByIDResponse, error)
	UpdateDepartment(context.Context, *DepartmentUpdateRequest) (*DepartmentUpdateResponse, error)
}

// UnimplementedDepartmentRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedDepartmentRegistryServer struct {
}

func (UnimplementedDepartmentRegistryServer) CreateDepartment(context.Context, *DepartmentCreateRequest) (*DepartmentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedDepartmentRegistryServer) DepartmentAddProject(context.Context, *DepartmentAddProjectRequest) (*DepartmentAddProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentAddProject not implemented")
}
func (UnimplementedDepartmentRegistryServer) DepartmentRemoveProject(context.Context, *DepartmentRemoveProjectRequest) (*DepartmentRemoveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentRemoveProject not implemented")
}
func (UnimplementedDepartmentRegistryServer) GetDepartments(context.Context, *DepartmentGetRequest) (*DepartmentGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartments not implemented")
}
func (UnimplementedDepartmentRegistryServer) GetDepartmentByID(context.Context, *DepartmentGetByIDRequest) (*DepartmentGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentByID not implemented")
}
func (UnimplementedDepartmentRegistryServer) UpdateDepartment(context.Context, *DepartmentUpdateRequest) (*DepartmentUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}

// UnsafeDepartmentRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentRegistryServer will
// result in compilation errors.
type UnsafeDepartmentRegistryServer interface {
	mustEmbedUnimplementedDepartmentRegistryServer()
}

func RegisterDepartmentRegistryServer(s grpc.ServiceRegistrar, srv DepartmentRegistryServer) {
	s.RegisterService(&DepartmentRegistry_ServiceDesc, srv)
}

func _DepartmentRegistry_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentRegistryServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentRegistryServer).CreateDepartment(ctx, req.(*DepartmentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentRegistry_DepartmentAddProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentAddProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentRegistryServer).DepartmentAddProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/DepartmentAddProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentRegistryServer).DepartmentAddProject(ctx, req.(*DepartmentAddProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentRegistry_DepartmentRemoveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentRemoveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentRegistryServer).DepartmentRemoveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/DepartmentRemoveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentRegistryServer).DepartmentRemoveProject(ctx, req.(*DepartmentRemoveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentRegistry_GetDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentRegistryServer).GetDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/GetDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentRegistryServer).GetDepartments(ctx, req.(*DepartmentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentRegistry_GetDepartmentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentRegistryServer).GetDepartmentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/GetDepartmentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentRegistryServer).GetDepartmentByID(ctx, req.(*DepartmentGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentRegistry_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentRegistryServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentRegistryServer).UpdateDepartment(ctx, req.(*DepartmentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepartmentRegistry_ServiceDesc is the grpc.ServiceDesc for DepartmentRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepartmentRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.constantine27k.crnt_data_manager.api.department.DepartmentRegistry",
	HandlerType: (*DepartmentRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepartment",
			Handler:    _DepartmentRegistry_CreateDepartment_Handler,
		},
		{
			MethodName: "DepartmentAddProject",
			Handler:    _DepartmentRegistry_DepartmentAddProject_Handler,
		},
		{
			MethodName: "DepartmentRemoveProject",
			Handler:    _DepartmentRegistry_DepartmentRemoveProject_Handler,
		},
		{
			MethodName: "GetDepartments",
			Handler:    _DepartmentRegistry_GetDepartments_Handler,
		},
		{
			MethodName: "GetDepartmentByID",
			Handler:    _DepartmentRegistry_GetDepartmentByID_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _DepartmentRegistry_UpdateDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/department/department.proto",
}
