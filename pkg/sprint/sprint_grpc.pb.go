// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: sprint/sprint.proto

package sprint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SprintRegistryClient is the client API for SprintRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SprintRegistryClient interface {
	Create(ctx context.Context, in *SprintCreateRequest, opts ...grpc.CallOption) (*SprintCreateResponse, error)
}

type sprintRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewSprintRegistryClient(cc grpc.ClientConnInterface) SprintRegistryClient {
	return &sprintRegistryClient{cc}
}

func (c *sprintRegistryClient) Create(ctx context.Context, in *SprintCreateRequest, opts ...grpc.CallOption) (*SprintCreateResponse, error) {
	out := new(SprintCreateResponse)
	err := c.cc.Invoke(ctx, "/github.constantine27k.crnt_data_manager.api.sprint.SprintRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SprintRegistryServer is the server API for SprintRegistry service.
// All implementations should embed UnimplementedSprintRegistryServer
// for forward compatibility
type SprintRegistryServer interface {
	Create(context.Context, *SprintCreateRequest) (*SprintCreateResponse, error)
}

// UnimplementedSprintRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedSprintRegistryServer struct {
}

func (UnimplementedSprintRegistryServer) Create(context.Context, *SprintCreateRequest) (*SprintCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

// UnsafeSprintRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SprintRegistryServer will
// result in compilation errors.
type UnsafeSprintRegistryServer interface {
	mustEmbedUnimplementedSprintRegistryServer()
}

func RegisterSprintRegistryServer(s grpc.ServiceRegistrar, srv SprintRegistryServer) {
	s.RegisterService(&SprintRegistry_ServiceDesc, srv)
}

func _SprintRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SprintCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.constantine27k.crnt_data_manager.api.sprint.SprintRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintRegistryServer).Create(ctx, req.(*SprintCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SprintRegistry_ServiceDesc is the grpc.ServiceDesc for SprintRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SprintRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.constantine27k.crnt_data_manager.api.sprint.SprintRegistry",
	HandlerType: (*SprintRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SprintRegistry_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sprint/sprint.proto",
}
